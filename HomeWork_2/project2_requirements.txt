Stage 2 requirements
To implement these requirements, you can continue/extend the code from step 1,
updating it to use the new concepts.
Your project must still comply with the General Criteria from the first
part (clean, encapsulation-compliant code, no global variables, no classes/-
methods that are not used/called anywhere), as well as the pointers to
Code versioning (keep uploading what you're working on to Git) and Documentation
(update the README accordingly).
Inheritance
• Define at least two different inheritance hierarchies (two inheritance hierarchies are considered different if they do not have the same base class and
derived class).
• At least one member data and at least one method that has the de modifier
access protected (usefully, to be accessed/called from a class that
inherit).
• At least one situation in which to call the constructor (with parameters) of the class
base, using the initialization list in the constructor of the derived class.

Virtual methods and abstract classes

• Define and extend (inherit) at least one abstract class (can have data
member but has at least one purely virtual method).
• Define at least 2 virtual methods to be overridden in inheriting classes. They can be purely virtual or with a default implementation. The methods defined in the other subsections are taken into consideration, except for virtual destructors.

Execution polymorphism

• Identify and mark with a comment at least 2 instances in which to
polymorphism occurs at execution (dynamic dispatch) in your project (e.g.
calling virtual methods via pointers/references to base class).
• Identify and mark with a comment at least 2 instances of upcasting in your code (e.g. assignment of objects of the type of inherited classes to pointers/references to the base class).

Exceptions

• Define at least one custom exception type, which extends the exception class
from the standard library.
• Throw exceptions in at least 2 different functions/methods (use your own defined exception type or those from the standard library).
• Implement at least a try...catch block that catches an exception defined and generated by you (with the explicit specification of the type of exception caught) and handle it in some way (display a message, retry the operation, throw another exception etc).

Static variables and methods

• Define and initialize a static member variable in at least one class.
• Implement at least two static methods in your classes (of which the
at least one must access/use the static variable defined under the previous point).

Bonus

• Separate declarations and implementations in your program by using separate header (.h/.hpp) and source (.cpp) files. You should have one of each
header file and a source file for each class in your program.
• Identify at least one inheritance situation in the diamond (must make sense
for your topic). Inheritance in diamond refers to having a class of
base, which I inherit with virtually two distinct classes, and then you have a
class that inherits both intermediate classes.